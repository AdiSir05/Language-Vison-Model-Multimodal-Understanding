from evaluate import load
import os
import matplotlib.pyplot as plt
from PIL import Image

def compute_evaluation_metrics(generated_captions, reference_captions):
    """
    Compute METEOR and ROUGE scores for generated captions.

    Args:
        generated_captions (list of str): Captions generated by the model.
        reference_captions (list of list of str): Reference captions for each image.

    Returns:
        dict: Dictionary containing METEOR, BLEU and ROUGE scores.
    """
    meteor = load("meteor")
    rouge = load("rouge")
    bleu = load("bleu")

    meteor_score = meteor.compute(predictions=generated_captions, references=reference_captions)
    rouge_score = rouge.compute(predictions=generated_captions, references=reference_captions)
    bleu_score = bleu.compute(predictions=generated_captions, references=reference_captions)

    results = {
        "meteor": meteor_score["meteor"],
        "bleu": bleu_score["bleu"],
        "rouge1": rouge_score["rouge1"],
        "rouge2": rouge_score["rouge2"],
        "rougeL": rouge_score["rougeL"],
    }
    return results




# Function to display the original image with captions
def display_original_image_with_captions(dataset, idx, generated_captions, reference_captions):
    """
    Displays the original image along with its generated and reference captions.

    Args:
        dataset (Flickr8kDataset): The dataset instance.
        idx (int): Index of the image to display.
        generated_captions (list of str): List of captions generated by the model.
        reference_captions (list of list of str): List of reference captions for each image.
    """
    image_ids = dataset.get_image_ids()
    image_id = image_ids[idx]
    image_path = os.path.join(dataset.image_dir, image_id)
    
    original_image = Image.open(image_path).convert("RGB")
    
    plt.figure(figsize=(original_image.width / 100, original_image.height / 100))  # Scale figsize based on image size
    plt.imshow(original_image)
    plt.axis('off')  
    plt.show()